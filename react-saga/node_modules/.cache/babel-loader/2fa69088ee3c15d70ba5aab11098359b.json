{"ast":null,"code":"import { take, call, fork, put } from 'redux-saga/effects';\nimport { IMAGES } from '../constants';\nimport { fetchImageStats } from '../api';\nimport { loadImageStats, setImageStats, setImageStatsError } from '../actions';\nexport function* handleStatsRequest(id) {\n  for (let i = 0; i < 3; i++) {\n    try {\n      yield put(loadImageStats(id));\n      const res = yield call(fetchImageStats, id);\n      yield put(setImageStats(id, res.downloads.total)); // image was loaded so we exit the generator\n\n      return true;\n    } catch (e) {// we just need to retry and dispactch an error\n      // if we tried more than 3 times\n    }\n  }\n\n  yield put(setImageStatsError(id));\n}\nexport default function* watchStatsRequest() {\n  while (true) {\n    // we get the action here\n    const _ref = yield take(IMAGES.LOAD_SUCCESS),\n          images = _ref.images;\n\n    for (let i = 0; i < images.length; i++) {\n      yield fork(handleStatsRequest, images[i].id);\n    }\n  }\n}","map":{"version":3,"sources":["/Users/govind.singh/Desktop/GitHub React/React/react-saga/src/sagas/statsSaga.js"],"names":["take","call","fork","put","IMAGES","fetchImageStats","loadImageStats","setImageStats","setImageStatsError","handleStatsRequest","id","i","res","downloads","total","e","watchStatsRequest","LOAD_SUCCESS","images","length"],"mappings":"AAAA,SAASA,IAAT,EAAeC,IAAf,EAAqBC,IAArB,EAA2BC,GAA3B,QAAsC,oBAAtC;AAEA,SAASC,MAAT,QAAuB,cAAvB;AACA,SAASC,eAAT,QAAgC,QAAhC;AACA,SAASC,cAAT,EAAyBC,aAAzB,EAAwCC,kBAAxC,QAAkE,YAAlE;AAEA,OAAO,UAAUC,kBAAV,CAA6BC,EAA7B,EAAiC;AACpC,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,CAApB,EAAuBA,CAAC,EAAxB,EAA4B;AACxB,QAAI;AACA,YAAMR,GAAG,CAACG,cAAc,CAACI,EAAD,CAAf,CAAT;AACA,YAAME,GAAG,GAAG,MAAMX,IAAI,CAACI,eAAD,EAAkBK,EAAlB,CAAtB;AACA,YAAMP,GAAG,CAACI,aAAa,CAACG,EAAD,EAAKE,GAAG,CAACC,SAAJ,CAAcC,KAAnB,CAAd,CAAT,CAHA,CAIA;;AACA,aAAO,IAAP;AACH,KAND,CAME,OAAOC,CAAP,EAAU,CACR;AACA;AACH;AACJ;;AACD,QAAMZ,GAAG,CAACK,kBAAkB,CAACE,EAAD,CAAnB,CAAT;AACH;AAED,eAAe,UAAUM,iBAAV,GAA8B;AACzC,SAAO,IAAP,EAAa;AACT;AADS,iBAEU,MAAMhB,IAAI,CAACI,MAAM,CAACa,YAAR,CAFpB;AAAA,UAEDC,MAFC,QAEDA,MAFC;;AAIT,SAAK,IAAIP,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGO,MAAM,CAACC,MAA3B,EAAmCR,CAAC,EAApC,EAAwC;AACpC,YAAMT,IAAI,CAACO,kBAAD,EAAqBS,MAAM,CAACP,CAAD,CAAN,CAAUD,EAA/B,CAAV;AACH;AACJ;AACJ","sourcesContent":["import { take, call, fork, put } from 'redux-saga/effects';\n\nimport { IMAGES } from '../constants';\nimport { fetchImageStats } from '../api';\nimport { loadImageStats, setImageStats, setImageStatsError } from '../actions';\n\nexport function* handleStatsRequest(id) {\n    for (let i = 0; i < 3; i++) {\n        try {\n            yield put(loadImageStats(id));\n            const res = yield call(fetchImageStats, id);\n            yield put(setImageStats(id, res.downloads.total));\n            // image was loaded so we exit the generator\n            return true;\n        } catch (e) {\n            // we just need to retry and dispactch an error\n            // if we tried more than 3 times\n        }\n    }\n    yield put(setImageStatsError(id));\n}\n\nexport default function* watchStatsRequest() {\n    while (true) {\n        // we get the action here\n        const { images } = yield take(IMAGES.LOAD_SUCCESS);\n\n        for (let i = 0; i < images.length; i++) {\n            yield fork(handleStatsRequest, images[i].id);\n        }\n    }\n}\n"]},"metadata":{},"sourceType":"module"}